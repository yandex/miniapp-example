{"version":3,"sources":["components/Content/index.tsx","components/Content/styles.module.css","components/DateFilter/Button/styles.module.css","components/DateFilter/styles.module.css","components/DateFilter/index.tsx","components/DateFilter/Button/index.tsx","components/LazyRender/index.tsx","hooks/useVisibleOnce.ts","components/SelectionList/style.module.css","components/EventCardMain/style.module.css","screens/MainScreen/Title/styles.module.css","components/SelectionList/index.tsx","components/EventCardMain/index.tsx","screens/MainScreen/Title/index.tsx","screens/MainScreen/Component.tsx"],"names":["Content","props","className","styles","content","filter","Boolean","join","children","module","exports","Presets","DateFilterButton","classNames","button","isActive","push","active","tip","onClick","memo","dispatch","useDispatch","date","useSelector","state","dateFilter","parsedDate","useMemo","parseDate","useState","isTomorrow","Tomorrow","Today","getPresetByDate","preset","setPreset","setTodayPreset","useCallback","setDate","dateToString","startOfToday","period","setTomorrowPreset","startOfTomorrow","container","LazyRender","skeleton","intersectionOptions","ref","useRef","canRender","options","isVisible","setVisible","useEffect","current","observer","IntersectionObserver","entry","isIntersecting","observe","disconnect","useVisibleOnce","needSkeleton","showSkeleton","SelectionList","items","block","map","selection","to","getSelectionUrl","code","item","key","Image","image","src","selectionCard","bgColor","alt","title","info","counter","count","preview","event","scheduleInfo","eventPreview","id","type","tickets","ticket","singleDate","getEventUrl","card","style","backgroundColor","day","month","description","annotation","name","actualListCard","src2x","actualListCard2x","PriceLabel","position","Title","defaultState","updatedAt","defaultUIState","isLoading","isUpdating","MainScreen","events","actualEventsSelector","isActualEventsLoading","actualEventsUISelector","selections","selectionsSelector","isSelectionsLoading","selectionsUISelector","actualEventsSkeleton","itemsGap","EventCardMainSkeleton","selectionListSkeleton","useMetrikaHit","DateFilter","EventsList","component","EventCardMain"],"mappings":"0HAAA,sCAYeA,IAJyB,SAAAC,GACpC,OAAO,yBAAKC,UAAW,CAACD,EAAMC,UAAWC,IAAOC,SAASC,OAAOC,SAASC,KAAK,MAAON,EAAMO,Y,oBCR/FC,EAAOC,QAAU,CAAC,QAAU,0B,oBCA5BD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,OAAS,uBAAuB,IAAM,sB,oBCAxFD,EAAOC,QAAU,CAAC,UAAY,4B,qCCUlBC,E,0ECiBGC,EAlB2B,SAAAX,GACtC,IAAMY,EAAa,CAACV,IAAOW,QAU3B,OARIb,EAAMc,UACNF,EAAWG,KAAKb,IAAOc,QAGvBhB,EAAMiB,KACNL,EAAWG,KAAKb,IAAOe,KAIvB,yBAAKhB,UAAWW,EAAWN,KAAK,KAAMY,QAASlB,EAAMkB,SAChDlB,EAAMO,W,4BDZPG,K,cAAAA,E,qBAAAA,M,KAqDGS,oBAhDc,WACzB,IAAMC,EAAWC,cACTC,EAASC,aAAY,SAACC,GAAD,OAAsBA,EAAMC,cAAjDH,KACFI,EAAaC,mBAAQ,kBAAMC,YAAUN,KAAO,CAACA,IAHpB,EAIHO,mBAoChC,SAAyBP,GACrB,GAAIQ,qBAAWR,GACX,OAAOZ,EAAQqB,SAGnB,OAAOrB,EAAQsB,MAzCsBC,CAAgBP,IAJtB,mBAIxBQ,EAJwB,KAIhBC,EAJgB,KAMzBC,EAAiBC,uBAAY,WAC/BF,EAAUzB,EAAQsB,OAElBZ,EACIkB,YAAQ,CACJhB,KAAMiB,YAAaC,0BACnBC,OAAQ,OAGjB,CAACrB,IAEEsB,EAAoBL,uBAAY,WAClCF,EAAUzB,EAAQqB,UAElBX,EACIkB,YAAQ,CACJhB,KAAMiB,YAAaI,6BACnBF,OAAQ,OAGjB,CAACrB,IAEJ,OACI,yBAAKnB,UAAWC,IAAO0C,WACnB,kBAAC,EAAD,CAAkB1B,QAASkB,EAAgBtB,SAAUoB,IAAWxB,EAAQsB,OAAxE,8CAGA,kBAAC,EAAD,CAAkBd,QAASwB,EAAmB5B,SAAUoB,IAAWxB,EAAQqB,UAA3E,6C,4DEzBGc,IAdqB,SAAC,GAAiD,IAA/CtC,EAA8C,EAA9CA,SAAUuC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,oBACjDC,EAAMC,iBAA8B,MACpCC,ECVH,SAAwBF,EAA6BG,GAAoC,MAG5DtB,qBAH4D,mBAGrFuB,EAHqF,KAG1EC,EAH0E,KAqB5F,OAhBAC,qBAAU,WACN,GAAKN,EAAIO,UAAWH,EAApB,CAIA,IAAMI,EAAW,IAAIC,sBAAqB,YAAc,IAAZC,EAAW,oBACnDL,EAAWK,EAAMC,kBAClBR,GAIH,OAFAK,EAASI,QAAQZ,EAAIO,SAEd,WACHC,EAASK,iBAEd,CAACb,EAAKG,EAASC,IAEXA,EDXWU,CAAed,EAAKD,GAF2C,EAG5ClB,oBAAS,GAHmC,mBAG1EkC,EAH0E,KAG5DC,EAH4D,KAWjF,OANAV,qBAAU,WACDJ,GACDc,GAAa,KAElB,CAACd,IAEG,yBAAKF,IAAKA,GAAME,EAAY3C,EAAWwD,GAAgBjB,K,oBEpBlEtC,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,KAAO,oBAAoB,MAAQ,qBAAqB,KAAO,oBAAoB,MAAQ,qBAAqB,QAAU,yB,oBCAzKD,EAAOC,QAAU,CAAC,KAAO,oBAAoB,MAAQ,qBAAqB,WAAa,0BAA0B,gBAAgB,6BAA6B,aAAa,0BAA0B,YAAc,2BAA2B,gBAAgB,6BAA6B,MAAQ,qBAAqB,QAAU,uBAAuB,KAAO,oBAAoB,IAAM,mBAAmB,MAAQ,uB,oBCArZD,EAAOC,QAAU,CAAC,MAAQ,wB,wJCuCXwD,EA3BwB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACtC,OACI,yBAAKjE,UAAWC,IAAOiE,OAClBD,EAAME,KAAI,SAAAC,GACP,OAAKA,EAKD,kBAAC,IAAD,CAAMC,GAAIC,YAAgBF,EAAUG,MAAOvE,UAAWC,IAAOuE,KAAMC,IAAKL,EAAUG,MAC9E,kBAACG,EAAA,EAAD,CACI1E,UAAWC,IAAO0E,MAClBC,IAAKR,EAAUO,OAASP,EAAUO,MAAME,cACxCC,QAASV,EAAUO,OAASP,EAAUO,MAAMG,QAC5CC,IAAKX,EAAUY,QAEnB,yBAAKhF,UAAWC,IAAOgF,MACnB,yBAAKjF,UAAWC,IAAO+E,OAAQZ,EAAUY,OACzC,yBAAKhF,UAAWC,IAAOiF,SAAUd,EAAUe,MAA3C,iDAbD,U,qDCuCZjE,kBA1CwB,SAAAnB,GAAU,IACrCqF,EAAYrF,EAAMsF,MAAMC,aAAxBF,QADoC,EAEArF,EAAMsF,MAAME,aAAhDC,EAFoC,EAEpCA,GAAIR,EAFgC,EAEhCA,MAAOS,EAFyB,EAEzBA,KAAMd,EAFmB,EAEnBA,MAAOe,EAFY,EAEZA,QAC1BC,EAASD,GAAWA,EAAQ,GAE5BZ,EAAWH,GAASA,EAAMG,SAAY,OACtCc,EAAaR,GAAWA,EAAQQ,WAEtC,OACI,kBAAC,IAAD,CAAMvB,GAAIwB,YAAYL,GAAKxF,UAAWC,IAAO6F,MACzC,yBAAK9F,UAAWC,IAAO,cAAe8F,MAAO,CAAEC,gBAAiBlB,IAC3Dc,GACG,yBAAK5F,UAAWC,IAAOoB,MACnB,yBAAKrB,UAAWC,IAAOgG,KAAML,EAAWK,KACxC,yBAAKjG,UAAWC,IAAOiG,OAAQN,EAAWM,QAIlD,yBAAKlG,UAAWC,IAAOkG,aACnB,yBAAKnG,UAAWC,IAAOmG,YAAaX,EAAKY,MACzC,yBAAKrG,UAAWC,IAAO+E,OAAQA,KAGvC,yBAAKhF,UAAWC,IAAO,kBAClB0E,GAASA,EAAM2B,eACZ,kBAAC5B,EAAA,EAAD,CACI1E,UAAWC,IAAO0E,MAClBI,IAAKC,EACLJ,IAAKD,EAAM2B,eACXC,MAAO5B,EAAM6B,iBACb1B,QAASH,EAAMG,UAGnB,yBAAK9E,UAAWC,IAAOmF,UAE1BO,GAAU,kBAACc,EAAA,EAAD,CAAYd,OAAQA,EAAQe,SAAU,UAChD/B,GAAS,yBAAK3E,UAAWC,IAAO,wB,oCC3ClC0G,EAJS,SAAC,GAAkB,IAAhBrG,EAAe,EAAfA,SACvB,OAAO,wBAAIN,UAAWC,IAAO+E,OAAQ1E,ICcnCsG,EAA+C,CACjD3C,MAAO,GACP4C,UAAW,GAGTC,EAA+C,CACjDC,WAAW,EACXC,YAAY,GAqCDC,UAlCc,WAAO,IACjBC,GAAW5F,YAAY6F,MAAyBP,GAAvD3C,MACWmD,GAA0B9F,YAAY+F,MAA2BP,GAA5EC,UACOO,GAAehG,YAAYiG,MAAuBX,GAAzD3C,MACWuD,GAAwBlG,YAAYmG,MAAyBX,GAAxEC,UAEFW,EAAuBhG,mBACzB,kBAAM,kBAAC,IAAD,CAAoBiG,SAAU,EAAGxC,MAAO,EAAGW,KAAM8B,QACvD,IAEEC,EAAwBnG,mBAAQ,kBAAM,kBAAC,IAAD,QAA2B,IAIvE,OAFAoG,cAGI,oCACI,kBAACC,EAAA,EAAD,MACA,kBAACjI,EAAA,EAAD,KACI,kBAAC,EAAD,6CACCsH,EACGM,EAEA,kBAACM,EAAA,EAAD,CAAYL,SAAU,EAAG1D,MAAOiD,EAAQe,UAAWC,IAGvD,kBAAC,EAAD,yDACA,kBAACtF,EAAA,EAAD,CAAYC,SAAUgF,GACjBL,EAAsBK,EAAwB,kBAAC,EAAD,CAAe5D,MAAOqD","file":"static/js/main-screen.ed63a313.chunk.js","sourcesContent":["import React from 'react';\n\nimport styles from './styles.module.css';\n\nexport type ContentProps = {\n    className?: string;\n};\n\nconst Content: React.FC<ContentProps> = props => {\n    return <div className={[props.className, styles.content].filter(Boolean).join(' ')}>{props.children}</div>;\n};\n\nexport default Content;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"styles_content__2I1Dq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"styles_button__2rAFr\",\"active\":\"styles_active__2JFQe\",\"tip\":\"styles_tip__2Q_6K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__2A-iM\"};","import React, { memo, useCallback, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isTomorrow, startOfToday, startOfTomorrow } from 'date-fns';\n\nimport { RootState } from '../../redux';\nimport { setDate } from '../../redux/slices/date-filter';\nimport { parseDate, dateToString } from '../../lib/date';\n\nimport DateFilterButton from './Button';\nimport styles from './styles.module.css';\n\nexport enum Presets {\n    Today = 'Today',\n    Tomorrow = 'Tomorrow',\n}\n\nconst DateFilter: React.FC = () => {\n    const dispatch = useDispatch();\n    const { date } = useSelector((state: RootState) => state.dateFilter);\n    const parsedDate = useMemo(() => parseDate(date), [date]);\n    const [preset, setPreset] = useState(getPresetByDate(parsedDate));\n\n    const setTodayPreset = useCallback(() => {\n        setPreset(Presets.Today);\n\n        dispatch(\n            setDate({\n                date: dateToString(startOfToday()),\n                period: 1,\n            })\n        );\n    }, [dispatch]);\n\n    const setTomorrowPreset = useCallback(() => {\n        setPreset(Presets.Tomorrow);\n\n        dispatch(\n            setDate({\n                date: dateToString(startOfTomorrow()),\n                period: 1,\n            })\n        );\n    }, [dispatch]);\n\n    return (\n        <div className={styles.container}>\n            <DateFilterButton onClick={setTodayPreset} isActive={preset === Presets.Today}>\n                Сегодня\n            </DateFilterButton>\n            <DateFilterButton onClick={setTomorrowPreset} isActive={preset === Presets.Tomorrow}>\n                Завтра\n            </DateFilterButton>\n        </div>\n    );\n};\n\nfunction getPresetByDate(date: Date) {\n    if (isTomorrow(date)) {\n        return Presets.Tomorrow;\n    }\n\n    return Presets.Today;\n}\n\nexport default memo(DateFilter);\n","import React from 'react';\n\nimport styles from './styles.module.css';\n\ntype Props = {\n    onClick: () => void;\n    isActive?: boolean;\n    tip?: boolean;\n};\n\nconst DateFilterButton: React.FC<Props> = props => {\n    const classNames = [styles.button];\n\n    if (props.isActive) {\n        classNames.push(styles.active);\n    }\n\n    if (props.tip) {\n        classNames.push(styles.tip);\n    }\n\n    return (\n        <div className={classNames.join(' ')} onClick={props.onClick}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default DateFilterButton;\n","import React, { useRef, ReactElement, useState, useEffect } from 'react';\n\nimport { useVisibleOnce } from '../../hooks/useVisibleOnce';\n\ntype Props = {\n    children: ReactElement;\n    skeleton?: ReactElement;\n    intersectionOptions?: IntersectionObserverInit;\n};\n\nconst LazyRender: React.FC<Props> = ({ children, skeleton, intersectionOptions }) => {\n    const ref = useRef<HTMLDivElement | null>(null);\n    const canRender = useVisibleOnce(ref, intersectionOptions);\n    const [needSkeleton, showSkeleton] = useState(false);\n\n    useEffect(() => {\n        if (!canRender) {\n            showSkeleton(true);\n        }\n    }, [canRender]);\n\n    return <div ref={ref}>{canRender ? children : needSkeleton && skeleton}</div>;\n};\n\nexport default LazyRender;\n","import { RefObject, useEffect, useState } from 'react';\n\nexport function useVisibleOnce(ref: RefObject<HTMLElement>, options?: IntersectionObserverInit) {\n    // Пока не навешан обработчик на элемент, мы точно не можем сказать видим он или нет,\n    // поэтому начальное значение undefined\n    const [isVisible, setVisible] = useState<boolean>();\n\n    useEffect(() => {\n        if (!ref.current || isVisible) {\n            return;\n        }\n\n        const observer = new IntersectionObserver(([entry]) => {\n            setVisible(entry.isIntersecting);\n        }, options);\n\n        observer.observe(ref.current);\n\n        return () => {\n            observer.disconnect();\n        };\n    }, [ref, options, isVisible]);\n\n    return isVisible;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"style_block__nbGLK\",\"item\":\"style_item__2p1oi\",\"image\":\"style_image__1jr9d\",\"info\":\"style_info__1rs7p\",\"title\":\"style_title__3WSNg\",\"counter\":\"style_counter__Bi-Go\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"style_card__2gVp3\",\"title\":\"style_title__2C19-\",\"annotation\":\"style_annotation__qwU_O\",\"image-wrapper\":\"style_image-wrapper__3wF8L\",\"info-block\":\"style_info-block__1kz3x\",\"description\":\"style_description__3tTtR\",\"image-overlay\":\"style_image-overlay__K9FQX\",\"image\":\"style_image__28Djs\",\"preview\":\"style_preview__SYQjv\",\"date\":\"style_date__2Kj0_\",\"day\":\"style_day__3u0av\",\"month\":\"style_month__364tk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"styles_title__1d5_B\"};","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { getSelectionUrl } from '../../lib/url-builder';\nimport { Selection } from '../../redux/slices/selections';\nimport Image from '../Image';\n\nimport styles from './style.module.css';\n\nexport type Props = {\n    items: Array<Selection | null>;\n};\n\nconst SelectionList: React.FC<Props> = ({ items }) => {\n    return (\n        <div className={styles.block}>\n            {items.map(selection => {\n                if (!selection) {\n                    return null;\n                }\n\n                return (\n                    <Link to={getSelectionUrl(selection.code)} className={styles.item} key={selection.code}>\n                        <Image\n                            className={styles.image}\n                            src={selection.image && selection.image.selectionCard}\n                            bgColor={selection.image && selection.image.bgColor}\n                            alt={selection.title}\n                        />\n                        <div className={styles.info}>\n                            <div className={styles.title}>{selection.title}</div>\n                            <div className={styles.counter}>{selection.count} событий</div>\n                        </div>\n                    </Link>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default SelectionList;\n","import React, { memo } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { getEventUrl } from '../../lib/url-builder';\nimport { ActualEvent } from '../../lib/api/fragments/actual-event';\n\nimport Image from '../Image';\nimport PriceLabel from '../PriceLabel';\n\nimport styles from './style.module.css';\n\nexport type Props = {\n    event: ActualEvent;\n};\n\nconst EventCardMain: React.FC<Props> = props => {\n    const { preview } = props.event.scheduleInfo;\n    const { id, title, type, image, tickets } = props.event.eventPreview;\n    const ticket = tickets && tickets[0];\n\n    const bgColor = (image && image.bgColor) || '#555';\n    const singleDate = preview && preview.singleDate;\n\n    return (\n        <Link to={getEventUrl(id)} className={styles.card}>\n            <div className={styles['info-block']} style={{ backgroundColor: bgColor }}>\n                {singleDate && (\n                    <div className={styles.date}>\n                        <div className={styles.day}>{singleDate.day}</div>\n                        <div className={styles.month}>{singleDate.month}</div>\n                    </div>\n                )}\n\n                <div className={styles.description}>\n                    <div className={styles.annotation}>{type.name}</div>\n                    <div className={styles.title}>{title}</div>\n                </div>\n            </div>\n            <div className={styles['image-wrapper']}>\n                {image && image.actualListCard ? (\n                    <Image\n                        className={styles.image}\n                        alt={title}\n                        src={image.actualListCard}\n                        src2x={image.actualListCard2x}\n                        bgColor={image.bgColor}\n                    />\n                ) : (\n                    <div className={styles.preview} />\n                )}\n                {ticket && <PriceLabel ticket={ticket} position={'right'} />}\n                {image && <div className={styles['image-overlay']} />}\n            </div>\n        </Link>\n    );\n};\n\nexport default memo(EventCardMain);\n","import React from 'react';\n\nimport styles from './styles.module.css';\n\nconst Title: React.FC = ({ children }) => {\n    return <h2 className={styles.title}>{children}</h2>;\n};\n\nexport default Title;\n","import React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { selectionsSelector, selectionsUISelector, SelectionsState } from '../../redux/slices/selections';\nimport { actualEventsSelector, actualEventsUISelector } from '../../redux/slices/actual-events';\n\nimport LazyRender from '../../components/LazyRender';\nimport Content from '../../components/Content';\nimport DateFilter from '../../components/DateFilter';\nimport SelectionList from '../../components/SelectionList';\nimport SelectionListSkeleton from '../../components/SelectionList/Skeleton';\nimport EventsList from '../../components/EventsList';\nimport EventsListSkeleton from '../../components/EventsList/Skeleton';\nimport EventCardMain from '../../components/EventCardMain';\nimport EventCardMainSkeleton from '../../components/EventCardMain/Skeleton';\nimport { useMetrikaHit } from '../../hooks/useMetrikaHit';\n\nimport Title from './Title';\n\nconst defaultState: SelectionsState['data']['key'] = {\n    items: [],\n    updatedAt: 0,\n};\n\nconst defaultUIState: SelectionsState['ui']['key'] = {\n    isLoading: false,\n    isUpdating: false,\n};\n\nconst MainScreen: React.FC = () => {\n    const { items: events } = useSelector(actualEventsSelector) || defaultState;\n    const { isLoading: isActualEventsLoading } = useSelector(actualEventsUISelector) || defaultUIState;\n    const { items: selections } = useSelector(selectionsSelector) || defaultState;\n    const { isLoading: isSelectionsLoading } = useSelector(selectionsUISelector) || defaultUIState;\n\n    const actualEventsSkeleton = useMemo(\n        () => <EventsListSkeleton itemsGap={8} count={5} card={EventCardMainSkeleton} />,\n        []\n    );\n    const selectionListSkeleton = useMemo(() => <SelectionListSkeleton />, []);\n\n    useMetrikaHit();\n\n    return (\n        <>\n            <DateFilter />\n            <Content>\n                <Title>Лучшее</Title>\n                {isActualEventsLoading ? (\n                    actualEventsSkeleton\n                ) : (\n                    <EventsList itemsGap={8} items={events} component={EventCardMain} />\n                )}\n\n                <Title>Подборки</Title>\n                <LazyRender skeleton={selectionListSkeleton}>\n                    {isSelectionsLoading ? selectionListSkeleton : <SelectionList items={selections} />}\n                </LazyRender>\n            </Content>\n        </>\n    );\n};\n\nexport default MainScreen;\n"],"sourceRoot":""}