{"version":3,"sources":["components/Content/index.tsx","components/Content/styles.module.css","components/DateFilter/Button/styles.module.css","components/DateFilter/styles.module.css","components/DateFilter/index.tsx","components/DateFilter/Button/index.tsx","components/RubricTitle/index.tsx","components/RubricTitle/styles.module.css","components/RubricTitle/Skeleton/index.tsx","components/RubricTitle/Skeleton/styles.module.css","screens/RubricScreen/Component.tsx"],"names":["Content","props","className","styles","content","filter","Boolean","join","children","module","exports","Presets","DateFilterButton","classNames","button","isActive","push","active","tip","onClick","memo","dispatch","useDispatch","date","useSelector","state","dateFilter","parsedDate","useMemo","parseDate","useState","isTomorrow","Tomorrow","Today","getPresetByDate","preset","setPreset","setTodayPreset","useCallback","setDate","dateToString","startOfToday","period","setTomorrowPreset","startOfTomorrow","container","RubricTitle","title","RubricTitleSkeleton","defaultState","events","items","paging","offset","total","hasMoreItems","updatedAt","defaultUIState","isLoading","isLoadingMore","isUpdating","RubricScreen","code","rubricEventsSelector","rubricEventsUISelector","onLoadMore","loadMoreRubricEvents","useMetrikaHit","count","card","EventCardSkeleton","type","hasMore","loadMore","pageSize","component","EventCard","skeleton"],"mappings":"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","file":"static/js/rubric-screen.b3895400.chunk.js","sourcesContent":["import React from 'react';\n\nimport styles from './styles.module.css';\n\nexport type ContentProps = {\n    className?: string;\n};\n\nconst Content: React.FC<ContentProps> = props => {\n    return <div className={[props.className, styles.content].filter(Boolean).join(' ')}>{props.children}</div>;\n};\n\nexport default Content;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"styles_content__2I1Dq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"styles_button__2rAFr\",\"active\":\"styles_active__2JFQe\",\"tip\":\"styles_tip__2Q_6K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__2A-iM\"};","import React, { memo, useCallback, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isTomorrow, startOfToday, startOfTomorrow } from 'date-fns';\n\nimport { RootState } from '../../redux';\nimport { setDate } from '../../redux/slices/date-filter';\nimport { parseDate, dateToString } from '../../lib/date';\n\nimport DateFilterButton from './Button';\nimport styles from './styles.module.css';\n\nexport enum Presets {\n    Today = 'Today',\n    Tomorrow = 'Tomorrow',\n}\n\nconst DateFilter: React.FC = () => {\n    const dispatch = useDispatch();\n    const { date } = useSelector((state: RootState) => state.dateFilter);\n    const parsedDate = useMemo(() => parseDate(date), [date]);\n    const [preset, setPreset] = useState(getPresetByDate(parsedDate));\n\n    const setTodayPreset = useCallback(() => {\n        setPreset(Presets.Today);\n\n        dispatch(\n            setDate({\n                date: dateToString(startOfToday()),\n                period: 1,\n            })\n        );\n    }, [dispatch]);\n\n    const setTomorrowPreset = useCallback(() => {\n        setPreset(Presets.Tomorrow);\n\n        dispatch(\n            setDate({\n                date: dateToString(startOfTomorrow()),\n                period: 1,\n            })\n        );\n    }, [dispatch]);\n\n    return (\n        <div className={styles.container}>\n            <DateFilterButton onClick={setTodayPreset} isActive={preset === Presets.Today}>\n                Сегодня\n            </DateFilterButton>\n            <DateFilterButton onClick={setTomorrowPreset} isActive={preset === Presets.Tomorrow}>\n                Завтра\n            </DateFilterButton>\n        </div>\n    );\n};\n\nfunction getPresetByDate(date: Date) {\n    if (isTomorrow(date)) {\n        return Presets.Tomorrow;\n    }\n\n    return Presets.Today;\n}\n\nexport default memo(DateFilter);\n","import React from 'react';\n\nimport styles from './styles.module.css';\n\ntype Props = {\n    onClick: () => void;\n    isActive?: boolean;\n    tip?: boolean;\n};\n\nconst DateFilterButton: React.FC<Props> = props => {\n    const classNames = [styles.button];\n\n    if (props.isActive) {\n        classNames.push(styles.active);\n    }\n\n    if (props.tip) {\n        classNames.push(styles.tip);\n    }\n\n    return (\n        <div className={classNames.join(' ')} onClick={props.onClick}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default DateFilterButton;\n","import React from 'react';\n\nimport styles from './styles.module.css';\n\nconst RubricTitle: React.FC = ({ children }) => {\n    return <h2 className={styles.title}>{children}</h2>;\n};\n\nexport default RubricTitle;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"styles_title__1KYxF\"};","import React from 'react';\n\nimport { Text } from '../../../components/Skeletons';\n\nimport styles from './styles.module.css';\n\nconst RubricTitleSkeleton: React.FC = () => <Text className={styles.title} />;\n\nexport default RubricTitleSkeleton;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"styles_title__357br\"};","import React, { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { RootState } from '../../redux';\nimport {\n    loadMoreRubricEvents,\n    rubricEventsSelector,\n    RubricEventsState,\n    rubricEventsUISelector,\n} from '../../redux/slices/rubric-events';\n\nimport Content from '../../components/Content';\nimport RubricTitle from '../../components/RubricTitle';\nimport RubricTitleSkeleton from '../../components/RubricTitle/Skeleton';\nimport EventsList from '../../components/EventsList';\nimport EventsListSkeleton from '../../components/EventsList/Skeleton';\nimport EventCard from '../../components/EventCard';\nimport EventCardSkeleton from '../../components/EventCard/Skeleton';\nimport DateFilter from '../../components/DateFilter';\nimport { useMetrikaHit } from '../../hooks/useMetrikaHit';\n\nconst defaultState: RubricEventsState['data']['key'] = {\n    title: '',\n    events: {\n        items: [],\n        paging: { offset: 0, total: 0 },\n    },\n    hasMoreItems: false,\n    updatedAt: 0,\n};\nconst defaultUIState: RubricEventsState['ui']['key'] = {\n    isLoading: false,\n    isLoadingMore: false,\n    isUpdating: false,\n};\n\ntype Props = {\n    code: string;\n};\n\nconst RubricScreen: React.FC<Props> = ({ code }) => {\n    const dispatch = useDispatch();\n    const { events, hasMoreItems, title } = useSelector(rubricEventsSelector(code)) || defaultState;\n    const { isLoading, isLoadingMore } = useSelector(rubricEventsUISelector(code)) || defaultUIState;\n    const date = useSelector((state: RootState) => state.dateFilter);\n\n    const onLoadMore = useCallback(() => {\n        dispatch(loadMoreRubricEvents(code, date));\n    }, [dispatch, code, date]);\n\n    useMetrikaHit();\n\n    return (\n        <>\n            <DateFilter />\n            <Content>\n                {isLoading ? (\n                    <>\n                        <RubricTitleSkeleton />\n                        <EventsListSkeleton count={10} card={EventCardSkeleton} />\n                    </>\n                ) : (\n                    <>\n                        <RubricTitle>{title}</RubricTitle>\n                        <EventsList\n                            type=\"loadable\"\n                            hasMore={hasMoreItems}\n                            loadMore={onLoadMore}\n                            isLoadingMore={isLoadingMore}\n                            items={events.items}\n                            pageSize={10}\n                            component={EventCard}\n                            skeleton={<EventsListSkeleton count={3} card={EventCardSkeleton} />}\n                        />\n                    </>\n                )}\n            </Content>\n        </>\n    );\n};\n\nexport default RubricScreen;\n"],"sourceRoot":""}