{"version":3,"sources":["components/EventsSlider/style.module.css","components/EventCardVertical/style.module.css","screens/EventScreen/components/EventsFeed/styles.module.css","components/EventsSlider/index.tsx","components/EventCardVertical/index.tsx","screens/EventScreen/components/EventsFeed/index.tsx","screens/EventScreen/components/RecommendedEvents/Component.tsx"],"names":["module","exports","EventsSlider","items","Card","component","className","styles","list","map","actualEvent","item","key","eventPreview","id","event","memo","props","title","argument","image","tickets","ticket","to","getEventUrl","card","filter","Boolean","join","onClick","wrapper","eventListCard","Image","alt","src","src2x","eventListCard2x","bgColor","preview","PriceLabel","position","overlay","annotation","MoreButton","button","getRubricUrl","tagCode","EventsFeed","events","length","ContentBlock","container","Title","paging","total","EventCardVertical","Component","skeleton","recommendedEvents","useSelector","recommendedEventsSelector","recommendedEventsUISelector","isLoading","top","concert","cinema","theatre"],"mappings":"6GACAA,EAAOC,QAAU,CAAC,KAAO,oBAAoB,KAAO,sB,oBCApDD,EAAOC,QAAU,CAAC,KAAO,oBAAoB,MAAQ,qBAAqB,WAAa,0BAA0B,QAAU,uBAAuB,QAAU,uBAAuB,MAAQ,qBAAqB,QAAU,yB,oBCA1ND,EAAOC,QAAU,CAAC,UAAY,0BAA0B,OAAS,yB,6GC4BlDC,EAduB,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,MAAkBC,EAAW,EAAtBC,UAC5C,OACI,yBAAKC,UAAWC,IAAOC,MAClBL,EAAMM,KAAI,SAAAC,GACP,OAAKA,EAIE,kBAACN,EAAD,CAAME,UAAWC,IAAOI,KAAMC,IAAKF,EAAYG,aAAaC,GAAIC,MAAOL,IAHnE,U,mCC4BZM,kBA/B4B,SAAAC,GAAU,IAAD,EACAA,EAAMF,MAAMF,aAApDC,EADwC,EACxCA,GAAII,EADoC,EACpCA,MAAOC,EAD6B,EAC7BA,SAAUC,EADmB,EACnBA,MAAOC,EADY,EACZA,QAC9BC,EAASD,GAAWA,EAAQ,GAElC,OACI,kBAAC,IAAD,CACIE,GAAIC,YAAYV,GAChBR,UAAW,CAACC,IAAOkB,KAAMR,EAAMX,WAAWoB,OAAOC,SAASC,KAAK,KAC/DC,QAASZ,EAAMY,SAEf,yBAAKvB,UAAWC,IAAOuB,SAClBV,GAASA,EAAMW,cACZ,kBAACC,EAAA,EAAD,CACI1B,UAAWC,IAAOa,MAClBa,IAAKf,EACLgB,IAAKd,EAAMW,cACXI,MAAOf,EAAMgB,gBACbC,QAASjB,EAAMiB,UAGnB,yBAAK/B,UAAWC,IAAO+B,UAE1BhB,GAAU,kBAACiB,EAAA,EAAD,CAAYjB,OAAQA,EAAQkB,SAAU,SAChDpB,GAAS,yBAAKd,UAAWC,IAAOkC,WAErC,yBAAKnC,UAAWC,IAAOW,OAAQA,GAC/B,yBAAKZ,UAAWC,IAAOmC,YAAavB,O,oCCL1CwB,EAA4C,SAAA1B,GAC9C,OACI,kBAAC,IAAD,CAAMX,UAAWC,IAAOqC,OAAQrB,GAAIsB,YAAa5B,EAAM6B,UAAvD,uBAMOC,EA1BqB,SAAC,GAAgC,IAA9B7B,EAA6B,EAA7BA,MAAO8B,EAAsB,EAAtBA,OAAQF,EAAc,EAAdA,QAClD,OAAKE,EAIuB,IAAxBA,EAAO7C,MAAM8C,OACN,KAIP,kBAACC,EAAA,EAAD,CAAc5C,UAAWC,IAAO4C,WAC5B,kBAACC,EAAA,EAAD,KAAQlC,GACP4B,GAAWE,EAAOK,OAAOC,MAAQ,EAAI,kBAAC,EAAD,CAAYR,QAASA,IAAc,KACzE,kBAAC,EAAD,CAAc3C,MAAO6C,EAAO7C,MAAOE,UAAWkD,KAX3C,MCOAC,UAlBoB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC5BC,EAAoBC,YAAYC,MAA8B,GAGpE,OAFsBD,YAAYE,MAAgC,IAA1DC,UAGGL,EAIP,oCACI,kBAAC,EAAD,CAAYvC,MAAO,+IAA6B8B,OAAQU,EAAkBK,MAC1E,kBAAC,EAAD,CAAY7C,MAAO,mDAAY8B,OAAQU,EAAkBM,QAASlB,QAAS,YAC3E,kBAAC,EAAD,CAAY5B,MAAO,2BAAQ8B,OAAQU,EAAkBO,OAAQnB,QAAS,WACtE,kBAAC,EAAD,CAAY5B,MAAO,yDAAa8B,OAAQU,EAAkBQ,QAASpB,QAAS","file":"static/js/recommended-events.8259bba6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"style_list__2Sqtg\",\"item\":\"style_item__3WyDO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"style_card__vJ77l\",\"title\":\"style_title__1sAAr\",\"annotation\":\"style_annotation__tHuKn\",\"wrapper\":\"style_wrapper__zSdvb\",\"overlay\":\"style_overlay__23mv1\",\"image\":\"style_image__6oQDb\",\"preview\":\"style_preview__OKJKQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__Hydp0\",\"button\":\"styles_button__1HUmb\"};","import React from 'react';\n\nimport { ActualEvent } from '../../lib/api/fragments/actual-event';\n\nimport styles from './style.module.css';\n\nexport type Props = {\n    items: Array<ActualEvent | null>;\n    component: React.FC<{\n        event: ActualEvent;\n        onClick?: () => void;\n        className?: string;\n    }>;\n};\n\nconst EventsSlider: React.FC<Props> = ({ items, component: Card }) => {\n    return (\n        <div className={styles.list}>\n            {items.map(actualEvent => {\n                if (!actualEvent) {\n                    return null;\n                }\n\n                return <Card className={styles.item} key={actualEvent.eventPreview.id} event={actualEvent} />;\n            })}\n        </div>\n    );\n};\n\nexport default EventsSlider;\n","import React, { memo } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { getEventUrl } from '../../lib/url-builder';\nimport { ActualEvent } from '../../lib/api/fragments/actual-event';\n\nimport Image from '../Image';\nimport PriceLabel from '../PriceLabel';\n\nimport styles from './style.module.css';\n\nexport type Props = {\n    event: ActualEvent;\n    onClick?: () => void;\n    className?: string;\n};\n\nconst EventCardVertical: React.FC<Props> = props => {\n    const { id, title, argument, image, tickets } = props.event.eventPreview;\n    const ticket = tickets && tickets[0];\n\n    return (\n        <Link\n            to={getEventUrl(id)}\n            className={[styles.card, props.className].filter(Boolean).join(' ')}\n            onClick={props.onClick}\n        >\n            <div className={styles.wrapper}>\n                {image && image.eventListCard ? (\n                    <Image\n                        className={styles.image}\n                        alt={title}\n                        src={image.eventListCard}\n                        src2x={image.eventListCard2x}\n                        bgColor={image.bgColor}\n                    />\n                ) : (\n                    <div className={styles.preview} />\n                )}\n                {ticket && <PriceLabel ticket={ticket} position={'left'} />}\n                {image && <div className={styles.overlay} />}\n            </div>\n            <div className={styles.title}>{title}</div>\n            <div className={styles.annotation}>{argument}</div>\n        </Link>\n    );\n};\n\nexport default memo(EventCardVertical);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { getRubricUrl } from '../../../../lib/url-builder';\nimport { RecommendedEvents } from '../../../../redux/slices/recommended-events';\n\nimport EventsSlider from '../../../../components/EventsSlider';\nimport EventCardVertical from '../../../../components/EventCardVertical';\n\nimport ContentBlock from '../ContentBlock';\nimport Title from '../Title';\n\nimport styles from './styles.module.css';\n\ntype Props = {\n    title: string;\n    events: RecommendedEvents['concert'];\n    tagCode?: string;\n};\n\nconst EventsFeed: React.FC<Props> = ({ title, events, tagCode }) => {\n    if (!events) {\n        return null;\n    }\n\n    if (events.items.length === 0) {\n        return null;\n    }\n\n    return (\n        <ContentBlock className={styles.container}>\n            <Title>{title}</Title>\n            {tagCode && events.paging.total > 5 ? <MoreButton tagCode={tagCode} /> : null}\n            <EventsSlider items={events.items} component={EventCardVertical} />\n        </ContentBlock>\n    );\n};\n\nconst MoreButton: React.FC<{ tagCode: string }> = props => {\n    return (\n        <Link className={styles.button} to={getRubricUrl(props.tagCode)}>\n            Все\n        </Link>\n    );\n};\n\nexport default EventsFeed;\n","import React, { ReactElement } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { recommendedEventsSelector, recommendedEventsUISelector } from '../../../../redux/slices/recommended-events';\n\nimport EventsFeed from '../EventsFeed';\n\ntype Props = {\n    skeleton: ReactElement;\n};\n\nconst Component: React.FC<Props> = ({ skeleton }) => {\n    const recommendedEvents = useSelector(recommendedEventsSelector) || {};\n    const { isLoading } = useSelector(recommendedEventsUISelector) || {};\n\n    if (isLoading) {\n        return skeleton;\n    }\n\n    return (\n        <>\n            <EventsFeed title={'Больше интересных событий'} events={recommendedEvents.top} />\n            <EventsFeed title={'Концерты'} events={recommendedEvents.concert} tagCode={'concert'} />\n            <EventsFeed title={'Кино'} events={recommendedEvents.cinema} tagCode={'cinema'} />\n            <EventsFeed title={'Спектакли'} events={recommendedEvents.theatre} tagCode={'theatre'} />\n        </>\n    );\n};\n\nexport default Component;\n"],"sourceRoot":""}